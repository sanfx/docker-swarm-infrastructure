---
- name: Verify stacks directory exists (on first swarm node)
  when: inventory_hostname == groups['swarm_managers'][0]
  tags: ["pihole"]
  file:
    path: "/home/{{ansible_user}}/stacks"
    state: directory

- name: Verify pihole directory exists (on first swarm node)
  when: inventory_hostname == groups['swarm_managers'][0]
  tags: ["pihole"]
  file:
    path: "/home/{{ansible_user}}/stacks/pihole"
    state: directory

- name: Verify dns directory exists (on first swarm node)
  when: inventory_hostname != groups['swarm_managers'][0]
  tags: ["dns"]
  file:
    path: "/home/{{ansible_user}}/stacks/dns"
    state: directory

- name: Copy Prometheus rules with owner and permissions
  when: inventory_hostname != groups['swarm_managers'][0]
  tags: ["dns"]
  ansible.builtin.copy:
    src: ./config
    dest: /home/{{ansible_user}}/stacks/dnsmasq
    mode: '0644'

- name: Verify pihole exporter directory exists (on first swarm node)
  when: inventory_hostname == groups['swarm_managers'][0]
  tags: ["pihole"]
  file:
    path: "/home/{{ansible_user}}/stacks/pihole/exporter"
    state: directory

- name: Ensure group "pihole" exists
  tags: ["pihole"]
  group:
    name: pihole
    state: present

- name: Add user "pihole"  
  tags: ["pihole"]
  user:
    name: pihole
    groups: pihole
    shell: /sbin/nologin
    append: yes
    comment: "Pihole nologin User"
    state: present

- name: Verify /etc/pihole directory exists (on first swarm node)
  when: inventory_hostname == groups['swarm_managers'][0]
  tags: ["pihole"]
  file:
    path: "/etc/pihole"
    state: directory
    owner: "pihole"
    group: "pihole"
    mode: 0775

- name: Verify lighttpd directory exists (on first swarm node)
  when: inventory_hostname == groups['swarm_managers'][0]
  tags: ["pihole"]
  file:
    path: "/home/{{ansible_user}}/stacks/lighttpd"
    state: directory

- name: Create docker-compose stack file for DNS and DOH(on first swarm node)
  when: inventory_hostname == groups['swarm_managers'][0]
  tags: ["dns"]
  template:
    src: dns-stack.j2
    dest: /home/{{ansible_user}}/stacks/dns/dns-doh-stack.yml
    mode: 0775

- name: Systemd resolved service activation
  when: inventory_hostname != groups['swarm_managers'][0]
  tags: ["dns"]
  systemd:
    name: systemd-resolved.service
    enabled: no
    state: stopped

- name: Deploy DNSMasq and DOH stack from a compose file (on first swarm node)
  when: inventory_hostname == groups['swarm_managers'][0]
  tags: ["dns"]
  docker_stack:
    state: present
    name: dns_doh
    compose:
      - /home/{{ansible_user}}/stacks/dns/dns-doh-stack.yml

- name: Create docker-compose file for Pihole(on first swarm node)
  when: inventory_hostname == groups['swarm_managers'][0]
  tags: ["pihole"]
  template:
    src: pihole-stack.j2
    dest: /home/{{ansible_user}}/stacks/pihole/docker-compose.yml
    mode: 0775

- name: Create lighttpd external configuration file for Pihole and DOH(on first swarm node)
  when: inventory_hostname == groups['swarm_managers'][0]
  template:
    src: lighttpd-external.j2
    dest: /home/{{ansible_user}}/stacks/lighttpd/external.conf
  tags: ['lighttpd']

- name: Check that the webproc executable exists
  stat:
    path: /usr/local/bin/webproc
  register: webproc_stat_result

- name: Check that the gzip executable exists
  stat:
    path: /usr/bin/gzip
  register: gzip_stat_result

- name: Install gunzip if it is absent
  when: not gzip_stat_result.stat.exists
  tags: ["dns"]
  apt:
    name: gzip
    state: present

- name: Download webproc_0.4.0_linux_amd64.gz
  when: not webproc_stat_result.stat.exists
  tags: ["dns"]
  get_url:
    url: https://github.com/jpillora/webproc/releases/download/v0.4.0/webproc_0.4.0_linux_amd64.gz
    dest: /usr/local/bin/webproc.gz
    mode: '0777'

- name: uncompress file.
  when: not webproc_stat_result.stat.exists
  shell: gunzip /usr/local/bin/webproc.gz 
  tags: ["dns"]

# - name: Unarchive a file that needs to be downloaded (added in 2.0)
#   ansible.builtin.unarchive:
#     src: https://github.com/jpillora/webproc/releases/download/v0.4.0/webproc_0.4.0_linux_amd64.gz
#     dest: /usr/local/bin
#     remote_src: yes

- name: DNSMasq Webproc Systemd Service file creation
  tags: ["dns"]
  copy:
    dest: /etc/systemd/system/webproc-dnsmasq.service
    content: |
      [Unit]
      Description=Webproc DNSMasq Systemd Service
      Requires=network.target
      After=network.target
      [Service]
      Type=simple
      LimitNOFILE=1024
      RemainAfterExit=true
      Restart=on-failure
      WorkingDirectory=/home/{{ansible_user}}/stacks/dnsmasq/
      ExecStart=webproc -p {{dnsmasq_web_port}} -u {{DNSMASQ_HTTP_USER}} --pass {{DNSMASQ_HTTP_PASS}}  -c config/dnsmasq.conf  -- dnsmasq --no-daemon
      RestartSec=5
      KillMode=process
      KillSignal=SIGINT
      [Install]
      WantedBy=multi-user.target

# - name: Docker compose Service file creation for Pihole
  # tags: ["pihole"]
  # copy:
  #   dest: /etc/systemd/system/docker-compose.service
  #   content: |
  #     [Unit]
  #     Description=Docker Compose Service
  #     Requires=docker.service
  #     After=docker.service
  #     [Service]
  #     Type=oneshot
  #     RemainAfterExit=true
  #     WorkingDirectory=/home/{{ansible_user}}/stacks/pihole/
  #     ExecStart=/usr/local/bin/docker-compose up -d --remove-orphans
  #     ExecStop=/usr/local/bin/docker-compose down
  #     [Install]
  #     WantedBy=multi-user.target

- name: DNSMasq Webprox Systemd service activation
  tags: ["dns"]
  systemd:
    name: webproc-dnsmasq.service
    enabled: yes
    state: started