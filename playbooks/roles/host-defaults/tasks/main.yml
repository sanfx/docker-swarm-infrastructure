---
- name: Check if auto update is enabled
  stat:
    path: /etc/apt/apt.conf.d/20auto-upgrades
  register: autoupdate

- name: Disable auto update
  when: autoupdate.stat.exists
  become: true
  become_method: sudo
  file:
    path: /etc/apt/apt.conf.d/20auto-upgrades
    state: absent

- name: Register the system release
  raw: uname -r
  register: linux_revision
  changed_when: no
  check_mode: no
  ignore_errors: false

- name: Update nameserver in /etc/resolv.conf
  lineinfile:
    path: /etc/resolv.conf
    line: 'nameserver 1.1.1.1'
    insertbefore: BOF

- name: Install fuse if it is absent
  tags: ["rclone"]
  apt:
    name: fuse
    state: present

- name: Install zip if it is absent
  tags: ["rclone"]
  apt:
    name: zip
    state: present

- name: Unarchive a file that is already on the remote machine
  ansible.builtin.unarchive:
    src: "https://downloads.rclone.org/{{rclone_version}}/rclone-{{rclone_version}}-{{ansible_system|lower}}-amd64.zip"
    dest: /tmp/
    remote_src: yes

- name: Move rclone to /usr/local/bin
  command: mv /tmp/rclone-{{rclone_version}}-{{ansible_system | lower}}-amd64/rclone /usr/local/bin

- name: Verify mount location exists on {{ansible_hostname}}
  file:
    path: "/mnt/{{mount_location}}"
    state: directory

- name: Verify mount location exists on {{ansible_hostname}}
  file:
    path: "/mnt/data"
    state: directory

- name: Verify rclone cache directory exists
  file:
    path: "/var/rclone"
    state: directory

- name: Create rclone config file on {{ansible_hostname}}.
  template:
    src: rclone_config.j2
    dest: /etc/rclone.conf

- name: Create rclone systemd rclone service file on {{ansible_hostname}}.
  template:
    src: rclone-mount.j2
    dest: /etc/systemd/system/rclone-mount.service

- name: Enable rclone-mount.service systemd unit {{ansible_hostname}}
  ansible.builtin.systemd:
    name: rclone-mount.service
    enabled: yes
    state: started

- name: Create rclone systemd rclone service file on {{ansible_hostname}}.
  template:
    src: rclone-mount-data.j2
    dest: /etc/systemd/system/rclone-mount-data.service

- name: Enable rclone-mount-data systemd service unit {{ansible_hostname}}
  ansible.builtin.systemd:
    name: rclone-mount-data.service
    enabled: yes
    state: started

# - name: Install rclone if it is absent
#   tags: ["rclone"]
#   apt:
#     name: rclone
#     state: present

# - name: print result
#   debug:
#     msg:
#       - "{{linux_revision['stdout_lines']}}"
#       - linux_revision

# - name: Wait for any possibly running unattended upgrade to finish
#   # when: autoupdate.stat.exists
#   when:  "linux_revision.stdout_lines[0] != '4.4.0-210-generic'"
#   become: true
#   become_method: sudo
#   raw: systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true

# - name: Reboot host(s) after disabling auto update
#   shell: sleep 2 && /sbin/shutdown -r now "ansible reboot request"
#   async: 1
#   poll: 0
#   ignore_errors: true
#   become: true
#   become_method: sudo
#   when: autoupdate.stat.exists and inventory_hostname != "127.0.0.1" and inventory_hostname != "localhost"

# - name: Waiting for host(s) to reboot
#   local_action: "wait_for host={{inventory_hostname}} port=22 state=started delay=60"
#   become: false
#   ignore_errors: true
#   when: autoupdate.stat.exists and inventory_hostname != "127.0.0.1" and inventory_hostname != "localhost"

- name: Upgrade all packages to the latest version
  become: true
  become_method: sudo
  tags: ["apt"]
  apt:
    name: "*"
    state: latest
    force_apt_get: true
    update_cache: yes

- name: Verify system dependencies
  apt:
    pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
    state: present
    force_apt_get: true
    update_cache: yes
  tags: ["apt"]

- name: Install jsondiff Python library
  become: true
  become_method: sudo
  pip:
    name: jsondiff
  tags: ["pip"]

- name: Install pyyaml Python library
  become: true
  become_method: sudo
  tags: ["pip"]
  pip:
    name: pyyaml

